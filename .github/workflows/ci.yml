name: Code Quality & Testing Pipeline

# When should this workflow run?
on:
    # Run on pushes to main branch (when you merge code)
    push:
        branches: [main]
    # Run on pull requests to main (when someone wants to merge code)
    pull_request:
        branches: [main]

# Environment variables for all jobs
env:
    NODE_ENV: test

jobs:
    # Job 1: Install dependencies and setup (foundation for other jobs)
    setup:
        name: Setup Dependencies
        runs-on: ubuntu-latest

        steps:
            - name: Get the code
              uses: actions/checkout@v4

            - name: Setup Node.js from .nvmrc
              uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"

            - name: Install pnpm
              run: npm install -g pnpm

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            # Cache node_modules for other jobs (speeds up workflow)
            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

    # Job 2: TypeScript compilation check
    typescript:
        name: TypeScript Compilation
        runs-on: ubuntu-latest
        needs: setup

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Check that your TypeScript code compiles without errors
            - name: TypeScript type checking
              run: pnpm run type-check

            # This tells you if your code would successfully build for production
            - name: Test production build
              run: pnpm run build

    # Job 3: Code style and quality
    linting:
        name: Code Style & Quality
        runs-on: ubuntu-latest
        needs: setup

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Check that your code follows consistent style rules
            - name: ESLint code quality check
              run: pnpm run lint

            # Check that your code is properly formatted
            - name: Prettier formatting check
              run: pnpm run format:check

    # Job 4: Unit tests for utility functions
    unit-tests:
        name: Unit Tests (Utils & Validators)
        runs-on: ubuntu-latest
        needs: setup

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Set up test environment variables
            - name: Setup test environment
              run: |
                  echo "Setting up test environment variables"
              env:
                  JWT_ACCESS_SECRET: test-access-secret-key-for-ci-testing
                  JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-testing
                  ACCESS_TOKEN_EXPIRY: 15m
                  REFRESH_TOKEN_EXPIRY: 7d

            # Run your utility function tests (password, JWT, validators)
            - name: Run unit tests
              run: pnpm run test:run --reporter=verbose src/utils src/validators src/errors
              env:
                  JWT_ACCESS_SECRET: test-access-secret-key-for-ci-testing
                  JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-testing
                  ACCESS_TOKEN_EXPIRY: 15m
                  REFRESH_TOKEN_EXPIRY: 7d

    # Job 5: Service tests (more complex business logic)
    service-tests:
        name: Service & Business Logic Tests
        runs-on: ubuntu-latest
        needs: setup

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Run tests for your services (UserService, etc.)
            - name: Run service tests
              run: pnpm run test:run --reporter=verbose src/services
              env:
                  JWT_ACCESS_SECRET: test-access-secret-key-for-ci-testing
                  JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-testing
                  DATABASE_URL: postgresql://test:test@localhost:5432/testdb

    # Job 6: Integration tests with database
    integration-tests:
        name: Integration Tests (Database Required)
        runs-on: ubuntu-latest
        needs: setup

        # Set up PostgreSQL service for integration tests
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_PASSWORD: test
                    POSTGRES_USER: test
                    POSTGRES_DB: testdb
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Setup test database schema
            - name: Setup test database
              run: |
                  pnpm prisma generate
                  pnpm prisma db push --force-reset
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/testdb

            # Run integration tests that actually use the database
            - name: Run integration tests
              run: |
                  echo "Running integration tests..."
                  # Add integration tests here when you create them
                  echo "Integration test setup complete"
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/testdb
                  JWT_ACCESS_SECRET: test-access-secret-key-for-ci-testing
                  JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-testing

    # Job 7: Test coverage reporting
    coverage:
        name: Test Coverage Report
        runs-on: ubuntu-latest
        needs: [unit-tests, service-tests]

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version-file: ".nvmrc"
                  cache: "pnpm"
            - run: npm install -g pnpm
            - run: pnpm install --frozen-lockfile

            # Generate comprehensive coverage report
            - name: Generate coverage report
              run: pnpm run test:coverage
              env:
                  JWT_ACCESS_SECRET: test-access-secret-key-for-ci-testing
                  JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-testing

            # Upload coverage report as artifact (you can download and view it)
            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: coverage/
                  retention-days: 30

    # Job 8: Final quality gate
    quality-gate:
        name: Quality Gate
        runs-on: ubuntu-latest
        needs: [typescript, linting, unit-tests, service-tests, integration-tests, coverage]

        steps:
            - name: All checks passed
              run: |
                  echo "ðŸŽ‰ All quality checks passed!"
                  echo "âœ… TypeScript compilation successful"
                  echo "âœ… Code style and linting passed"  
                  echo "âœ… Unit tests passed"
                  echo "âœ… Service tests passed"
                  echo "âœ… Integration tests completed"
                  echo "âœ… Coverage report generated"
                  echo ""
                  echo "ðŸš€ Code is ready for deployment!"
